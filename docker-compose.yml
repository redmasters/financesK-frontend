# =============================================================================
# Docker Compose para FinancesK Frontend
# =============================================================================

version: '3.8'

# Redes compartilhadas
networks:
  finances-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
  # Conecta à rede externa existente do backend
  microservices-network:
    external: true

services:
  # ---------------------------------------------------------------------------
  # Desenvolvimento - Angular com hot reload (usando backend real)
  # ---------------------------------------------------------------------------
  frontend-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: finances-frontend-dev
    ports:
      - "4200:4200"
    volumes:
      # Bind mount do código fonte para hot reload
      - .:/app
      - node_modules:/app/node_modules
      # Bind mount para evitar problemas de permissão
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true
      - CHOKIDAR_INTERVAL=1000
      - API_URL=http://financesk-app:8080
    networks:
      - microservices-network  # Conecta à rede do backend real
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4200"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ---------------------------------------------------------------------------
  # Desenvolvimento com Mock Backend - Angular com backend simulado
  # ---------------------------------------------------------------------------
  frontend-dev-mock:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: finances-frontend-dev-mock
    ports:
      - "4201:4200"  # Porta diferente para não conflitar
    volumes:
      # Bind mount do código fonte para hot reload
      - .:/app
      - node_modules:/app/node_modules
      # Bind mount para evitar problemas de permissão
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true
      - CHOKIDAR_INTERVAL=1000
      - API_URL=http://backend-mock:8080
    networks:
      - finances-network
    depends_on:
      - backend-mock
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4200"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    profiles:
      - mock

  # ---------------------------------------------------------------------------
  # Produção - Nginx servindo arquivos estáticos (usando backend real)
  # ---------------------------------------------------------------------------
  frontend-prod:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: finances-frontend-prod
    ports:
      - "80:80"
    volumes:
      - nginx_cache:/var/cache/nginx
    environment:
      - API_URL=http://financesk-app:8080
    networks:
      - microservices-network  # Conecta à rede do backend real
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # ---------------------------------------------------------------------------
  # Produção com Mock Backend
  # ---------------------------------------------------------------------------
  frontend-prod-mock:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: finances-frontend-prod-mock
    ports:
      - "8080:80"  # Porta diferente para não conflitar
    volumes:
      - nginx_cache:/var/cache/nginx
    environment:
      - API_URL=http://backend-mock:8080
    networks:
      - finances-network
    depends_on:
      - backend-mock
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    profiles:
      - mock

  # ---------------------------------------------------------------------------
  # Mock Backend - JSON Server simulando API
  # ---------------------------------------------------------------------------
  backend-mock:
    image: nginx:alpine
    container_name: finances-backend-mock
    ports:
      - "8081:8080"
    volumes:
      - ./mock-backend.conf:/etc/nginx/conf.d/default.conf:ro
    networks:
      - finances-network
    restart: unless-stopped
    profiles:
      - mock
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

# Volumes nomeados (consolidados em uma única seção)
volumes:
  node_modules:
    driver: local
  nginx_cache:
    driver: local
